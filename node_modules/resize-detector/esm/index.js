let raf = null;
function requestAnimationFrame (callback) {
  if (!raf) {
    raf = (
      window.requestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      function (callback) {
        return setTimeout(callback, 16)
      }
    ).bind(window);
  }
  return raf(callback)
}

let caf = null;
function cancelAnimationFrame (id) {
  if (!caf) {
    caf = (
      window.cancelAnimationFrame ||
      window.webkitCancelAnimationFrame ||
      window.mozCancelAnimationFrame ||
      function (id) {
        clearTimeout(id);
      }
    ).bind(window);
  }

  caf(id);
}

const ANIM_PROP_PREFIXES = ['Webkit', 'Moz', 'O', 'ms'];
const ANIM_START_EVENTS = [
  'webkitAnimationStart',
  'animationstart',
  'oAnimationStart',
  'MSAnimationStart'
];

let animation = null;
function getAnimation () {
  if (!animation) {
    let el = document.createElement('div');
    if (el.style.animation !== undefined) {
      animation = {
        property: 'animation',
        startEvent: 'animationstart',
        keyframes: 'keyframes'
      };
      return animation
    }

    ANIM_PROP_PREFIXES.some((prefix, i) => {
      let property = `${prefix}Animation`;
      if (el.style[property] !== undefined) {
        animation = {
          property,
          startEvent: ANIM_START_EVENTS[i],
          keyframes: `-${prefix.toLowerCase()}-keyframes`
        };
        return true
      }
    });

    return animation
  }
}

function createStyles (styleText) {
  var style = document.createElement('style');
  style.type = 'text/css';

  if (style.styleSheet) {
    style.styleSheet.cssText = styleText;
  } else {
    style.appendChild(document.createTextNode(styleText));
  }
  (document.querySelector('head') || document.body).appendChild(style);
  return style
}

function createElement (tagName, props = {}) {
  let elem = document.createElement(tagName);
  Object.keys(props).forEach(key => {
    elem[key] = props[key];
  });
  return elem
}

var css = ".resize-triggers{visibility:hidden;opacity:0}.resize-contract-trigger,.resize-contract-trigger:before,.resize-expand-trigger,.resize-triggers{content:\"\";position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden}.resize-contract-trigger,.resize-expand-trigger{background:#eee;overflow:auto}.resize-contract-trigger:before{width:200%;height:200%}";

let total = 0;
let style = null;
const ANIM_NAME = 'resize-attach';

function addListener (elem, callback) {
  if (elem.attachEvent) {
    elem.attachEvent('onresize', callback);
    return
  }

  let listeners = elem.__resize_listeners__;

  if (!listeners) {
    elem.__resize_listeners__ = [];
    if (window.ResizeObserver) {
      let ro = new ResizeObserver(() => {
        runCallbacks(elem);
      });
      ro.observe(elem);
      elem.__resize_observer__ = ro;
    } else {
      if (!total) {
        style = prepareStyles();
      }
      initTriggers(elem);
    }
    // for browsers that support animation, skip first scrollEvent
    elem.__resize_skip___ = !!getAnimation();
  }

  elem.__resize_listeners__.push(callback);
  total++;
}

function removeListener (elem, callback) {
  if (elem.detachEvent) {
    elem.detachEvent('onresize', callback);
    return
  }

  let listeners = elem.__resize_listeners__;
  listeners.splice(listeners.indexOf(callback), 1);

  if (!listeners.length) {
    if (elem.__resize_observer__) {
      elem.__resize_observer__.unobserve(elem);
      elem.__resize_observer__ = null;
    } else {
      elem.removeEventListener('scroll', callback);
      elem.removeChild(elem.__resize_triggers__.triggers);
      elem.__resize_triggers__ = null;
      elem.__resize_listeners__ = null;
    }
  }

  if (!--total && style) {
    style.parentNode.removeChild(style);
  }
}

function checkTriggers (elem) {
  let { width, height } = elem.__resize_last__;
  return elem.offsetWidth !== width || elem.offsetHeight !== height
}

function handleScroll () {
  // `this` denotes the scrolling element
  resetTriggers(this);
  if (this.__resize_raf__) {
    cancelAnimationFrame(this.__resize_raf__);
  }
  this.__resize_raf__ = requestAnimationFrame(() => {
    if (checkTriggers(this)) {
      this.__resize_last__.width = this.offsetWidth;
      this.__resize_last__.height = this.offsetHeight;
      runCallbacks(this);
    }
  });
}

function runCallbacks (elem) {
  if (elem.__resize_skip___) {
    elem.__resize_skip___ = false;
    return
  }
  elem.__resize_listeners__.forEach(callback => {
    callback.call(elem);
  });
}

function prepareStyles () {
  let animation = getAnimation();
  let styleText = '';

  if (animation) {
    let { property, keyframes } = animation;
    styleText = `@${keyframes} ${ANIM_NAME}{0%:{opacity:0;}to:{opacity:0}}.resize-triggers{${property}:1ms ${ANIM_NAME}}`;
  }

  styleText += css;

  return createStyles(styleText)
}

function initTriggers (elem) {
  let position = getComputedStyle(elem).position;
  if (position === 'static') {
    elem.style.position = 'relative';
  }

  elem.__resize_old_position__ = position;
  elem.__resize_last__ = {};

  let triggers = createElement('div', {
    className: 'resize-triggers'
  });
  let expand = createElement('div', {
    className: 'resize-expand-trigger'
  });
  let expandChild = createElement('div');
  let contract = createElement('div', {
    className: 'resize-contract-trigger'
  });
  expand.appendChild(expandChild);
  triggers.appendChild(expand);
  triggers.appendChild(contract);
  elem.appendChild(triggers);

  elem.__resize_triggers__ = {
    triggers,
    expand,
    expandChild,
    contract
  };

  resetTriggers(elem);

  elem.addEventListener('scroll', handleScroll, true);

  let { startEvent } = getAnimation() || {};
  if (startEvent) {
    triggers.addEventListener(startEvent, ({ animationName }) => {
      if (animationName === ANIM_NAME) {
        resetTriggers(elem);
      }
    });
  }
}

function resetTriggers (elem) {
  let { expand, expandChild, contract } = elem.__resize_triggers__;

  contract.scrollLeft = contract.scrollWidth;
  contract.scrollTop = contract.scrollHeight;
  expandChild.style.width = expand.offsetWidth + 1 + 'px';
  expandChild.style.height = expand.offsetHeight + 1 + 'px';
  expand.scrollLeft = expand.scrollWidth;
  expand.scrollTop = expand.scrollHeight;
}

export { addListener, removeListener };
